Problem Name: 207_nlp4lp_207

# Problem Description:
'''Problem description: A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?

Expected Output Schema:
{
  "variables": {
    "NumPopConcerts": "float",
    "NumRnBConcerts": "float"
  },
  "objective": "float"
}'''

Mathematical Formulation:
Sets:
- ConcertTypes = {Pop, RnB}

Parameters:
- AudiencePerPop = 100        // audience members attracted by one pop concert [audience members per concert]
- AudiencePerRnB = 240        // audience members attracted by one RnB concert [audience members per concert]
- PracticeDaysPop = 2         // practice days required for one pop concert [days per concert]
- PracticeDaysRnB = 4         // practice days required for one RnB concert [days per concert]
- MinAudience = 10000         // minimum total audience required [audience members]
- TotalPracticeDays = 180     // total available practice days [days]
- MaxFractionRnB = 0.4        // maximum allowed fraction of concerts that can be RnB

Variables:
- NumPopConcerts: integer, number of pop concerts to hold [concerts, integer ≥ 0]
- NumRnBConcerts: integer, number of RnB concerts to hold [concerts, integer ≥ 0]

Objective:
- Minimize TotalConcerts = NumPopConcerts + NumRnBConcerts
  (Minimizing the total number of concerts held)

Constraints:
1. Audience constraint:
   AudiencePerPop * NumPopConcerts + AudiencePerRnB * NumRnBConcerts ≥ MinAudience
   i.e., 100 * NumPopConcerts + 240 * NumRnBConcerts ≥ 10000

2. Practice time constraint:
   PracticeDaysPop * NumPopConcerts + PracticeDaysRnB * NumRnBConcerts ≤ TotalPracticeDays
   i.e., 2 * NumPopConcerts + 4 * NumRnBConcerts ≤ 180

3. RnB fraction constraint:
   NumRnBConcerts ≤ MaxFractionRnB * (NumPopConcerts + NumRnBConcerts)
   This can be rearranged as:
   NumRnBConcerts ≤ (2/3) * NumPopConcerts
   (Explanation: Starting from NumRnBConcerts ≤ 0.4*(NumPopConcerts + NumRnBConcerts), subtracting 0.4*NumRnBConcerts from both sides yields 0.6*NumRnBConcerts ≤ 0.4*NumPopConcerts, which simplifies to NumRnBConcerts ≤ (2/3)*NumPopConcerts.)

Expected Output Schema:
{
  "variables": {
    "NumPopConcerts": "integer ≥ 0",
    "NumRnBConcerts": "integer ≥ 0"
  },
  "objective": "Minimize TotalConcerts = NumPopConcerts + NumRnBConcerts"
}

Execution Results:
SUCCESS:
Solution using OR-Tools Linear Solver:
NumPopConcerts: 40
NumRnBConcerts: 25
TotalConcerts (Objective Value): 65

==================================================

Solution using OR-Tools CP Model:
NumPopConcerts: 40
NumRnBConcerts: 25
TotalConcerts (Objective Value): 65


Expected Output:
Expected solution

: {'variables': {'NumPopConcerts': 40.0, 'NumRnBConcerts': 25.0}, 'objective': 65.0}
