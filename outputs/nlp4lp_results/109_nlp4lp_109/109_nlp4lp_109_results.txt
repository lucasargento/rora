Problem Name: 109_nlp4lp_109

# Problem Description:
'''Problem description: A patient in the hospital can take two different pain killers, pain killer 1 and pain killer 2. Per dose, pain killer 1 delivers 0.5 units of medicine to the legs and 0.8 units of medicine to the back. Per dose, pain killer 2 delivers 0.7 units of medicine to the legs and 0.4 units of medicine to the back. In, addition pain killer 1 deliver 0.3 units of sleeping medicine and pain killer 2 delivers 0.6 units of sleeping medicine. At most 8 units of sleep medicine should be delivered and at least 4 units of medicine should be delivered to the legs. How many doses of each should be taken to maximize the amount of medicine delivered to the back?

Expected Output Schema:
{
  "variables": {
    "NumDoses": {
      "0": "float",
      "1": "float"
    }
  },
  "objective": "float"
}'''

Mathematical Formulation:
Sets:
- P: set of pain killers = {1, 2}

Parameters:
- legs_per_dose[p]: medicine units delivered to the legs per dose for pain killer p
  • For pain killer 1: 0.5 [units/dose]
  • For pain killer 2: 0.7 [units/dose]
- back_per_dose[p]: medicine units delivered to the back per dose for pain killer p
  • For pain killer 1: 0.8 [units/dose]
  • For pain killer 2: 0.4 [units/dose]
- sleep_per_dose[p]: sleeping medicine units delivered per dose for pain killer p
  • For pain killer 1: 0.3 [units/dose]
  • For pain killer 2: 0.6 [units/dose]
- max_sleep: maximum allowed sleep medicine = 8 [units]
- min_legs: minimum required legs medicine = 4 [units]

Variables:
- doses[p]: number of doses of pain killer p to be administered [continuous float ≥ 0]
  • doses[1]: doses of pain killer 1
  • doses[2]: doses of pain killer 2

Objective:
- Maximize total back medicine delivered = back_per_dose[1] * doses[1] + back_per_dose[2] * doses[2]

Constraints:
1. Sleep medicine constraint:
   - sleep_per_dose[1] * doses[1] + sleep_per_dose[2] * doses[2] ≤ max_sleep
     (i.e., 0.3 * doses[1] + 0.6 * doses[2] ≤ 8)
2. Legs medicine constraint:
   - legs_per_dose[1] * doses[1] + legs_per_dose[2] * doses[2] ≥ min_legs
     (i.e., 0.5 * doses[1] + 0.7 * doses[2] ≥ 4)

-------------------------------------------------

This completes the model, which is fully consistent and self-contained for implementation in Python or OR-Tools.

Execution Results:
SUCCESS:
Optimal solutions:
Linear_Solver_Model:
  Variables (NumDoses):
    Dose for pain killer 1: 26.666666666666668
    Dose for pain killer 2: 0.0
  Objective (Total back medicine delivered): 21.333333333333336


Expected Output:
Expected solution

: {'variables': {'NumDoses': {'0': 0.0, '1': 11.428571428571429}}, 'objective': 6.857142857142857}
