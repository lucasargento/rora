# Problem Description:
'''Problem description: A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?

Expected Output Schema:
{
  "variables": {
    "NumberOfSedans": "float",
    "NumberOfBuses": "float"
  },
  "objective": "float"
}'''

# Mathematical Formulation:
'''Below is the five‐element formulation of the problem as a mathematical optimization model.

--------------------------------------------------

Sets:
- VehicleTypes = {Sedan, Bus}

Parameters:
- seats[Sedan] = 50       (number of tourist seats provided by a sedan per day)
- seats[Bus] = 250        (number of tourist seats provided by a bus per day)
- pollution[Sedan] = 10   (pollution units generated by a sedan per day)
- pollution[Bus] = 40     (pollution units generated by a bus per day)
- maxPollution = 800      (maximum allowable pollution units per day)
- minTourists = 4600      (minimum number of tourists that must be served per day)
  (Assumption: All values are per day and consistent in units)

Variables:
- NumberOfSedans: number of sedans to purchase (integer, ≥ 0)
- NumberOfBuses: number of buses to purchase (integer, ≥ 0)

Objective:
- Minimize the total number of vehicles purchased, expressed as:
  TotalVehicles = NumberOfSedans + NumberOfBuses

Constraints:
1. Pollution Constraint:
   pollution[Sedan] * NumberOfSedans + pollution[Bus] * NumberOfBuses ≤ maxPollution
   i.e., 10 * NumberOfSedans + 40 * NumberOfBuses ≤ 800

2. Capacity Constraint (to serve at least the minimum number of tourists):
   seats[Sedan] * NumberOfSedans + seats[Bus] * NumberOfBuses ≥ minTourists
   i.e., 50 * NumberOfSedans + 250 * NumberOfBuses ≥ 4600

--------------------------------------------------

According to the expected output schema, the decision variables and the objective are summarized as follows:

{
  "variables": {
    "NumberOfSedans": "float",
    "NumberOfBuses": "float"
  },
  "objective": "float"
}'''

# Generated Code:
#!/usr/bin/env python3
from ortools.linear_solver import pywraplp

def run_linear_model():
    # Create the mip solver with the SCIP backend.
    solver = pywraplp.Solver.CreateSolver('SCIP')
    if not solver:
        print("Solver not created.")
        return None

    # Parameters
    maxPollution = 800       # Maximum allowable pollution units per day
    minTourists = 4600       # Minimum number of tourists to serve per day

    # Parameters for vehicles
    seats_sedan = 50         # Seats provided by a sedan
    seats_bus = 250          # Seats provided by a bus
    pollution_sedan = 10     # Pollution units by a sedan
    pollution_bus = 40       # Pollution units by a bus

    # Variables (integer, >= 0)
    sedans = solver.IntVar(0, solver.infinity(), 'NumberOfSedans')
    buses = solver.IntVar(0, solver.infinity(), 'NumberOfBuses')

    # Objective: Minimize total number of vehicles
    solver.Minimize(sedans + buses)

    # Constraint 1: Pollution constraint: 10*sedans + 40*buses <= 800
    solver.Add(pollution_sedan * sedans + pollution_bus * buses <= maxPollution)

    # Constraint 2: Capacity constraint: 50*sedans + 250*buses >= 4600
    solver.Add(seats_sedan * sedans + seats_bus * buses >= minTourists)

    status = solver.Solve()

    result = {}
    if status == pywraplp.Solver.OPTIMAL:
        result = {
            "variables": {
                "NumberOfSedans": sedans.solution_value(),
                "NumberOfBuses": buses.solution_value()
            },
            "objective": solver.Objective().Value()
        }
    else:
        result = {"message": "No optimal solution found."}
    return result

def main():
    # In this problem we have one formulation using a linear (MIP) model.
    model1_result = run_linear_model()

    print("Model 1 Results:")
    if "message" in model1_result:
        print(model1_result["message"])
    else:
        print("Optimal number of sedans:", model1_result["variables"]["NumberOfSedans"])
        print("Optimal number of buses:", model1_result["variables"]["NumberOfBuses"])
        print("Objective (Total Vehicles):", model1_result["objective"])

if __name__ == '__main__':
    main()

'''Execution Results:
SUCCESS:
Model 1 Results:
Optimal number of sedans: 0.0
Optimal number of buses: 19.0
Objective (Total Vehicles): 19.0
'''

'''Expected Output:
Expected solution

: {'variables': {'NumberOfSedans': 0.0, 'NumberOfBuses': 19.0}, 'objective': 19.0}'''

