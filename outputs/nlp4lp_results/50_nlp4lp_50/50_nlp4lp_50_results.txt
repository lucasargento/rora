Problem Name: 50_nlp4lp_50

# Problem Description:
'''Problem description: There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?

Expected Output Schema:
{
  "variables": {
    "NumUsedContainers": [
      "float"
    ]
  },
  "objective": "float"
}'''

Mathematical Formulation:
Below is the structured mathematical model following the five-element format.

------------------------------------------------------------
Sets:
- C: set of container types = {small, large}

------------------------------------------------------------
Parameters (all units are in “units”; note that water and powdered pill input quantities are provided per container, and the output is measured in paste “units”):
- water_req[c]: water required per container c
    • water_req[small] = 10 (units of water per small container)
    • water_req[large] = 20 (units of water per large container)
- pill_req[c]: powdered pill required per container c
    • pill_req[small] = 15 (units of powdered pill per small container)
    • pill_req[large] = 20 (units of powdered pill per large container)
- paste_out[c]: paste output per container c
    • paste_out[small] = 20 (units of paste per small container)
    • paste_out[large] = 30 (units of paste per large container)
- total_water: total available water = 500 (units)
- total_pill: total available powdered pill = 700 (units)

------------------------------------------------------------
Variables:
- x[c]: number of containers of type c to use
  • For each c in C, x[c] is a decision variable (assumed continuous for modeling, but naturally expected to be integer and nonnegative)
  • Domain: x[c] ≥ 0 (units may be “container uses”)

------------------------------------------------------------
Objective:
Maximize total paste output produced by the containers.
- Total_Paste = sum over c in C of (paste_out[c] * x[c])
In other words, maximize: 20*x[small] + 30*x[large]

------------------------------------------------------------
Constraints:
1. Water availability constraint:
   - For water: sum over c in C of (water_req[c] * x[c]) ≤ total_water
   - That is: 10*x[small] + 20*x[large] ≤ 500

2. Powdered pill availability constraint:
   - For pills: sum over c in C of (pill_req[c] * x[c]) ≤ total_pill
   - That is: 15*x[small] + 20*x[large] ≤ 700

------------------------------------------------------------
Notes:
- The units for water and pills are assumed to be consistent throughout the model.
- Although the decision variables x[small] and x[large] are defined here as continuous (floats) per the expected output schema, the context implies that they should be nonnegative integers for a practical implementation.
- If needed, one could include integrality constraints in an implementation.
- This formulation directly maps to typical Python or OR-Tools code using the variables, constraints, and objective defined above.

------------------------------------------------------------
Alternative Version (if fractional container use is not allowed):
- One might explicitly enforce that:
   • x[c] ∈ Z (nonnegative integers)
This additional condition would be added to the “Variables” section if an integer program is required.

Execution Results:
SUCCESS:
=== Continuous Model (Fractional Container Use Allowed) ===
Optimal number of small containers (x_small): 39.999999999999986
Optimal number of large containers (x_large): 5.000000000000007
Maximum paste produced: 950.0

=== Integer Model (Discrete Container Use) ===
Optimal number of small containers (x_small): 40
Optimal number of large containers (x_large): 5
Maximum paste produced: 950.0


Expected Output:
Expected solution

: {'variables': {'NumUsedContainers': [40.0, 5.0]}, 'objective': 950.0}
