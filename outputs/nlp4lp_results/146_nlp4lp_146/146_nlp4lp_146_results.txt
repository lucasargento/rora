Problem Name: 146_nlp4lp_146

# Problem Description:
'''Problem description: A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send  at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?

Expected Output Schema:
{
  "variables": {
    "SmallSuitcasesUsed": "float",
    "LargeSuitcasesUsed": "float"
  },
  "objective": "float"
}'''

Mathematical Formulation:
Sets:
- SuitcaseTypes: {Small, Large}

Parameters:
- snackCapacitySmall: number of snacks a small suitcase holds = 50 snacks per suitcase
- snackCapacityLarge: number of snacks a large suitcase holds = 80 snacks per suitcase
- minSmallToLargeRatio: minimum ratio of small to large suitcases = 2 (i.e., number of small suitcases must be at least twice the number of large suitcases)
- maxSmallAvailable: maximum available small suitcases = 70 suitcases
- maxLargeAvailable: maximum available large suitcases = 50 suitcases
- minLargeRequired: minimum number of large suitcases required = 15 suitcases
- maxTotalSuitcases: maximum total suitcases that can be sent = 70 suitcases

Variables:
- SmallSuitcasesUsed: integer variable representing the number of small suitcases used (units: suitcases), where 0 ≤ SmallSuitcasesUsed ≤ maxSmallAvailable
- LargeSuitcasesUsed: integer variable representing the number of large suitcases used (units: suitcases), where minLargeRequired ≤ LargeSuitcasesUsed ≤ maxLargeAvailable

Objective:
- Maximize TotalSnacksDelivered = snackCapacitySmall * SmallSuitcasesUsed + snackCapacityLarge * LargeSuitcasesUsed
  (Units: snacks delivered)

Constraints:
1. Suitcase Ratio Constraint: SmallSuitcasesUsed ≥ minSmallToLargeRatio * LargeSuitcasesUsed
2. Small Suitcase Availability: SmallSuitcasesUsed ≤ maxSmallAvailable
3. Large Suitcase Availability: LargeSuitcasesUsed ≤ maxLargeAvailable
4. Total Suitcase Limit: SmallSuitcasesUsed + LargeSuitcasesUsed ≤ maxTotalSuitcases
5. Minimum Large Suitcases: LargeSuitcasesUsed ≥ minLargeRequired

--------------------------------------------------
Following the Expected Output Schema, here is the digest:

{
  "variables": {
    "SmallSuitcasesUsed": "integer ≥ 0 and ≤ 70",
    "LargeSuitcasesUsed": "integer between 15 and 50, with additional ratio and total constraints"
  },
  "objective": "Maximize total snacks: 50 * SmallSuitcasesUsed + 80 * LargeSuitcasesUsed"
}

Execution Results:
SUCCESS:
Optimization Results:

Method: LinearSolver
  Solution: {'SmallSuitcasesUsed': 47.0, 'LargeSuitcasesUsed': 23.0}
  TotalSnacksDelivered: 4190.0

Method: CPSolver
  Solution: {'SmallSuitcasesUsed': 47, 'LargeSuitcasesUsed': 23}
  TotalSnacksDelivered: 4190


Expected Output:
Expected solution

: {'variables': {'SmallSuitcasesUsed': 47.0, 'LargeSuitcasesUsed': 23.0}, 'objective': 4190.0}
