Problem Name: 16_Solitaire_Battleships

Mathematical Formulation:
\[
\begin{array}{rcl}
\textbf{Parameters:} & & \\[1mm]
\text{Board dimensions:} & I=\{1,\ldots,12\},\quad J=\{1,\ldots,12\} & \\[1mm]
\text{Maximal ship length:} & L_{\max} = 5, & \\[1mm]
\text{Fleet composition:} & \text{For } \ell=1,\ldots,5,\quad n_\ell = \text{ship}[\ell] \quad \Bigl( n_1=2,\; n_2=0,\; n_3=1,\; n_4=4,\; n_5=4\Bigr) & \\[1mm]
\text{Row totals:} & r_i,\quad i\in I,\quad \text{with } r=(6,2,2,6,1,5,1,4,4,3,4,3) & \\[1mm]
\text{Column totals:} & c_j,\quad j\in J,\quad \text{with } c=(1,7,3,3,7,1,1,4,5,0,9,0) & \\[1mm]
\text{Hints:} & h_{ij},\quad (i,j)\in I\times J, \quad \text{with values } h_{ij}\in\{0,1,\text{unknown}\} & \\[2mm]
\multicolumn{3}{l}{\textbf{Sets for Ship Indexing and Placements:}} \\[1mm]
\text{Let } S & = & \{ s : s \text{ indexes a ship in the fleet} \},\\[1mm]
 & & \text{with associated length } L_s\in\{1,\ldots,5\}\text{. In particular, for each } \ell=1,\ldots,5,\\[1mm]
 &&\;\; \#\{s\in S: L_s=\ell\}= n_\ell.\\[2mm]
\text{For each ship } s\in S, & &\text{define the set of valid placements } P_s: \\[1mm]
P_s & = & \Bigl\{ (i,j,d):\; d\in\{0,1\},\; \begin{array}{l}
\text{if } d=0 \ (\text{horizontal})\text{ then } i\in I,\; j\in\{1,\ldots, 12 - L_s +1\},\\[1mm]
\text{if } d=1 \ (\text{vertical})\text{ then } i\in\{1,\ldots, 12-L_s+1\},\; j\in J
\end{array}\Bigr\}. \\[2mm]
\text{For any } s\in S \text{ and placement } p=(i,j,d)\in P_s, & & \text{define its cell coverage} \\[1mm]
C(s,i,j,d)& = & \begin{cases}
\{ (i, j+k): k=0,\ldots,L_s-1 \}, & \text{if } d=0,\\[1mm]
\{ (i+k, j): k=0,\ldots,L_s-1 \}, & \text{if } d=1.
\end{cases}
\end{array}
\]

\vspace{2mm}
\[
\begin{array}{rcl}
\multicolumn{3}{l}{\textbf{Decision Variables:}}\\[1mm]
y_{s,i,j,d} & \in & \{0,1\}, \quad \forall s\in S,\; \forall (i,j,d) \in P_s,\\[1mm]
& & \quad\text{where } y_{s,i,j,d}=1 \text{ means ship } s \text{ is placed with its “head” at } (i,j) \text{ in orientation } d\\[2mm]
x_{ij} & \in & \{0,1\}, \quad \forall (i,j) \in I\times J,\\[1mm]
& & \quad\text{where } x_{ij}=1 \text{ indicates that cell } (i,j) \text{ is occupied by a ship.}
\end{array}
\]

\vspace{2mm}
\[
\begin{array}{rcl}
\multicolumn{3}{l}{\textbf{Objective Function:}}\\[1mm]
\text{(Feasibility model)} \quad \min \quad & 0.
\end{array}
\]

\vspace{2mm}
\[
\begin{array}{rcl}
\multicolumn{3}{l}{\textbf{Constraints:}}\\[1mm]
\text{(1) Ship Placement:} & & \displaystyle \sum_{(i,j,d)\in P_s} y_{s,i,j,d} = 1 \quad \forall s\in S. \\[2mm]
\text{(2) Define Occupancy:} & & \displaystyle x_{ij} = \sum_{s\in S} \; \sum_{\substack{(i',j',d)\in P_s:\\ (i,j)\in C(s,i',j',d)}} y_{s,i',j',d} \quad \forall (i,j)\in I\times J. \\[2mm]
\text{(3) Row Sum Requirements:} & & \displaystyle \sum_{j=1}^{12} x_{ij} = r_i \quad \forall i\in I. \\[2mm]
\text{(4) Column Sum Requirements:} & & \displaystyle \sum_{i=1}^{12} x_{ij} = c_j \quad \forall j\in J. \\[2mm]
\text{(5) Hint Consistency:} & & \displaystyle x_{ij} = h_{ij} \quad \forall (i,j)\in I\times J \text{ for which } h_{ij}\in\{0,1\}. \\[2mm]
\text{(6) Non–overlap of Ships:} & & \displaystyle x_{ij} \le 1 \quad \forall (i,j)\in I\times J. \\[2mm]
\text{(7) Non–adjacency Between Distinct Ships:} & & \displaystyle \sum_{\substack{s\in S}} \; \sum_{\substack{(i',j',d)\in P_s:\\ p\in C(s,i',j',d)}} y_{s,i',j',d} + \; \sum_{\substack{s'\in S \\ s'\neq s}} \; \sum_{\substack{(i'',j'',d')\in P_{s'}:\\ q\in C(s',i'',j'',d')}} y_{s',i'',j'',d'} \le 1 \\[1mm]
& & \quad \forall (p,q)\in N,\text{ where } N\\[1mm]
& & \quad=\Bigl\{ \bigl( p=(i,j),~ q=(k,\ell) \bigr) \in (I\times J)^2: \; \| (i-k,\,j-\ell)\|_{\infty} = 1\Bigr\} \setminus \Bigl\{ (p,q): p,q \text{ belong to the same ship } \Bigr\}. 
\end{array}
\]

\vspace{1mm}
A more explicit (but equivalent) way to write the non–adjacency constraint is as follows. For every two distinct ships s and s′, and for every pair of valid placements
\[
(i,j,d)\in P_s\quad \text{and}\quad (i',j',d')\in P_{s'},
\]
if the sets of cells covered by the placements, together with their immediate adjacent (buffer) cells, intersect then
\[
y_{s,i,j,d}+ y_{s', i',j',d'} \le 1.
\]
More precisely, define for each placement the “buffer set”
\[
B(s,i,j,d)= \Bigl\{ (k,\ell): (k,\ell)\in C(s,i,j,d) \text{ or } \exists (u,v)\in C(s,i,j,d) \; \text{with} \; \| (k-u,\,\ell-v)\|_{\infty}=1 \Bigr\}.
\]
Then, for every two distinct ships (i.e., for all \( s,s'\in S,\; s\neq s'\)), impose
\[
y_{s,i,j,d}+ y_{s', i',j',d'} \le 1 \quad \forall (i,j,d)\in P_s,\; \forall (i',j',d')\in P_{s'} \text{ such that } B(s,i,j,d)\cap C(s',i',j',d')\neq\varnothing.
\]

\vspace{2mm}
\textbf{Summary:} This formulation introduces binary decision variables 
– the placement variables \(y_{s,i,j,d}\) for each ship \(s\) and valid position–orientation combination, and the cell occupancy variables \(x_{ij}\) – and enforces that
each ship is placed exactly once; the ships’ placements imply the occupancy of board cells; the occupancy sums in each row and column match the given totals; hints are respected; and finally, any two different ships have a “buffer” (non–adjacency) that prevents them from touching—even diagonally. The objective is simply to find a feasible assignment.

This model is bounded (only finitely many binary variables) and guaranteed to be feasible provided that the instance (fleet, hints, row and column sums) has a solution. 
\]



Execution Results:
SUCCESS:
Solution found:
Objective value = 0.0
Ship 0 (length 1) placed at row 11 col 8 with orientation Horizontal.
Ship 1 (length 1) placed at row 10 col 6 with orientation Vertical.
Ship 2 (length 3) placed at row 5 col 2 with orientation Horizontal.
Ship 3 (length 4) placed at row 3 col 0 with orientation Horizontal.
Ship 4 (length 4) placed at row 5 col 8 with orientation Vertical.
Ship 5 (length 4) placed at row 0 col 7 with orientation Vertical.
Ship 6 (length 4) placed at row 7 col 10 with orientation Vertical.
Ship 7 (length 5) placed at row 1 col 10 with orientation Vertical.
Ship 8 (length 5) placed at row 7 col 4 with orientation Vertical.
Ship 9 (length 5) placed at row 0 col 1 with orientation Horizontal.
Ship 10 (length 5) placed at row 7 col 1 with orientation Vertical.

Board occupancy (0: water, 1: ship):
0 1 1 1 1 1 0 1 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 1 0 
0 0 0 0 0 0 0 1 0 0 1 0 
1 1 1 1 0 0 0 1 0 0 1 0 
0 0 0 0 0 0 0 0 0 0 1 0 
0 0 1 1 1 0 0 0 1 0 1 0 
0 0 0 0 0 0 0 0 1 0 0 0 
0 1 0 0 1 0 0 0 1 0 1 0 
0 1 0 0 1 0 0 0 1 0 1 0 
0 1 0 0 1 0 0 0 0 0 1 0 
0 1 0 0 1 0 1 0 0 0 1 0 
0 1 0 0 1 0 0 0 1 0 0 0 


Expected Output:
Expected solution

: {'board': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 3, 7, 7, 4, 1, 5, 1, 1, 5, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 7, 1, 1], [1, 3, 7, 7, 4, 1, 1, 1, 6, 1, 1, 7, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1], [1, 1, 3, 7, 7, 4, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1], [1, 1, 5, 1, 1, 5, 1, 1, 1, 5, 1, 7, 1, 1], [1, 1, 7, 1, 1, 7, 1, 1, 1, 7, 1, 6, 1, 1], [1, 1, 7, 1, 1, 7, 1, 1, 1, 7, 1, 1, 1, 1], [1, 1, 7, 1, 1, 7, 1, 1, 1, 7, 1, 2, 1, 1], [1, 1, 6, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 'fill': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'npiece': [103, 2, 3, 3, 6, 6, 21]}
